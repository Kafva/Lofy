// `module.exports` is equivilent to what will be reeturned from requiring()
// a module, in this case a function containing the definition of all the routes

module.exports = (fastify,functions,CONSTS) => 
{
    // Declare a handler for the favicon fetch
    fastify.get('/favicon.png', (request, reply) => 
    {
        return reply.sendFile("resc/favicon.png") 
    })

    //*** OAuth STEP 1 ***//
    fastify.get('/login', (request, reply) =>
    // When a user tries to login redirect them to accounts.spotify 
    {
        // We will need to include:
        //	* the `client_id` (of the app) so spotify knows what app the user is trying to use
        //	* the `redirect_uri` (/callback) which the user will be sent back to after successful authentication with spotfiy
        // 	* a random `state` string for security
        //	* a blankspace seperated list of scopes that the app will need to access
        // 	* `show_dialog` can be set to true (false is default) if the user should be prompted
        // 	to authorize the app anew every time they use it
        //  * `response_type`, set to 'code'

        // To be able to verify that the response we recieve from spotify is valid
        // we save a cookie with the client containing the state,
        // when the client responds we make sure that the storedState in the cookie
        // matches that of the state in the request ot /callback
        let state = functions.stateString(CONSTS.STATE_STR_LENGTH);
        reply.cookie(CONSTS.state_cookie_key, state);

        // .stringify will produce a URL encoded string from a given JSON object
        reply.redirect( auth_endpoint + 
            queryString.stringify( 
            {
                client_id: CONSTS.client_id,
                redirect_uri: CONSTS.redirect_uri,
                state:  CONSTS.state,
                scope: CONSTS.scope ,
                response_type: 'code'
            }
        ));
    })

    //*** OAuth STEP 2 ***//
    fastify.get('/callback', (request, reply) =>
    // After sending the user to accounts.spotify they will be redirected back here
    {
        // If they accepted the request will contain:
        //	* code: The authrization code generated by spotify which we can exchange for a token
        // 	* state: The same state value that we sent in the first request

        // Extract the request paramaters and cookie value (if they exist)
        state = request.query.state || null;
        code = request.query.code || null;

        // x = A ? A : B
        // Assign A to x if A evaluates to true otherwise use B
        storedState = request.cookies ? request.cookies[CONSTS.state_cookie_key] : null;

        if ( storedState )
        {
            if ( state === storedState )
            {

            }
            else { functions.errorRedirect(reply,"State mismatch"); }
        }
        else { functions.errorRedirect(reply,"No stored state in cookies!"); }
    })

    fastify.get('/error', (request, reply) => 
    {
        // The .view object is supplied by point-of-view and is used
        // to parse inputs to the template engine
        reply.view('/templates/error.ejs', { error: request.query['error'] || "Unknown error" })
    })

    fastify.get('/', (request, reply) => 
    {
        // Static file serving
        return reply.sendFile("index.html") 
    })

}


