#!/usr/bin/env node

//********* DEBUGGING **********/
//		tshark -i en0 -Y "http.request || http.response" tcp port 443 or 80
//		curl http://localhost:3443/callback?state=333&code=deadbeef
//		Object.keys() ~ dir()
//******************************/

//******* CONSTANTS *******/
const WEB_SERVICE_PORT = 3443;
const STATE_STR_LENGTH = 16;
const DIR_ROOT = 'public'

const client_id = '08c759bd98d149f58ce04c9caabb0f97'; 
const auth_endpoint = 'https://accounts.spotify.com/authorize?';
const base_uri = 'http://localhost:3443';
const redirect_uri = `${base_uri}/callback`;

// Authorizations required by the app
// https://developer.spotify.com/documentation/general/guides/scopes/
const scope = 'playlist-read-private streaming'
const state_cookie_key = 'spotify_auth_state'

//******************************/

// Import the functions neccessary into the functions object
// Some external modules like queryString are also imported from here
const functions = require('./serverFunctions.js');

// Fastify is an alternative to express, with fastify-static being
// requiried to serve static files, i.e. access to reply.sendFile()
const fastify = require('fastify')({ logger: true })
const fastify_static = require('fastify-static')
const path = require('path')

// Set the static content directory root
// The register method allows the user to extend functionality with plugins. 
// A plugin can be a set of routes, a server decorator etc. in this case 
// it provides static file serving
fastify.register( fastify_static,
{
	root: path.join(__dirname, DIR_ROOT),
	prefix: '/',
})

// Register the CORS (Cross-origin resource sharing) plugin
// When issuing a request in JS from a page the HTTP headers 'Origin:'
// is accepted by default (Same origin requests)

// To send requests to other sites we need to explicitly enable these with the
// 'Access-Control-Allow-Origin:' field(s) in our HTTP messages  (can be set to wildcard).

fastify.register(require('fastify-cors'), 
{
	origin: "*",
})

// TEMPLATE ENGINE
// Plugin for template engine (i.e. dynamic HTML) compatiblity with fastify
fastify.register(require('point-of-view'), 
{
	engine: 
	{
		// The template engine used (EJS = Embedded JavaScript)
		ejs: require('ejs')
	}
})

// COOKIE support
// This plugin gives us access to reply.cookies and request.cookies
fastify.register(require('fastify-cookie'), {
	secret: functions.stateString(STATE_STR_LENGTH), 
	parseOptions: {} 
})

//********* ROUTES ************/

// Declare a handler for the favicon fetch
fastify.get('/favicon.png', (request, reply) => 
{
	return reply.sendFile("resc/favicon.png") 
})

//*** OAuth STEP 1 ***//
fastify.get('/login', (request, reply) =>
// When a user tries to login redirect them to accounts.spotify 
{
	// We will need to include:
	//	* the `client_id` (of the app) so spotify knows what app the user is trying to use
	//	* the `redirect_uri` (/callback) which the user will be sent back to after successful authentication with spotfiy
	// 	* a random `state` string for security
	//	* a blankspace seperated list of scopes that the app will need to access
	// 	* `show_dialog` can be set to true (false is default) if the user should be prompted
	// 	to authorize the app anew every time they use it
	//  * `response_type`, set to 'code'

	// To be able to verify that the response we recieve from spotify is valid
	// we save a cookie with the client containing the state,
	// when the client responds we make sure that the storedState in the cookie
	// matches that of the state in the request ot /callback
	let state = functions.stateString(STATE_STR_LENGTH);
	reply.cookie(state_cookie_key, state);

	// .stringify will produce a URL encoded string from a given JSON object
	reply.redirect( auth_endpoint + 
		queryString.stringify( 
		{
			client_id: client_id,
			redirect_uri: redirect_uri,
			state:  state,
			scope: scope ,
			response_type: 'code'
		}
	));
})

//*** OAuth STEP 2 ***//
fastify.get('/callback', (request, reply) =>
// After sending the user to accounts.spotify they will be redirected back here
{
	// If they accepted the request will contain:
	//	* code: The authrization code generated by spotify which we can exchange for a token
	// 	* state: The same state value that we sent in the first request

	// Extract the request paramaters and cookie value (if they exist)
	state = request.query.state || null;
	code = request.query.code || null;

	// x = A ? A : B
	// Assign A to x if A evaluates to true otherwise use B
	storedState = request.cookies ? request.cookies[state_cookie_key] : null;

	if ( storedState )
	{
		if ( state === storedState )
		{

		}
		else { functions.errorRedirect(reply,base_uri,"State mismatch"); }
	}
	else { functions.errorRedirect(reply,base_uri,"No stored state in cookies!"); }
})

fastify.get('/error', (request, reply) => 
{
	// The .view object is supplied by point-of-view and is used
	// to parse inputs to the template engine
	reply.view('/templates/error.ejs', { error: request.query['error'] || "Unknown error" })
})

fastify.get('/', (request, reply) => 
{
	// Static file serving
	return reply.sendFile("index.html") 
})

//*******************************/

// Run the server async style
const start = async () => 
{
	try 
	{
		await fastify.listen(WEB_SERVICE_PORT)
		fastify.log.info(`server listening on ${fastify.server.address().port}`)
	} 
	catch (err) 
	{
		fastify.log.error(err)
		process.exit(1)
	}
}

// Start the server
start()